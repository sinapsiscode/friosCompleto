generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        String         @id @default(cuid())
  username  String         @unique
  email     String         @unique
  password  String
  role      Role           @default(CLIENTE)
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  admin     Administrador?
  cliente   Cliente?
  tecnico   Tecnico?

  @@map("usuarios")
}

model Administrador {
  id           Int      @id @default(autoincrement())
  userId       String   @unique
  nombre       String
  apellido     String
  email        String   @unique
  telefono     String?
  direccion    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  profileImage String?
  usuario      Usuario  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("administradores")
}

model Tecnico {
  id              Int        @id @default(autoincrement())
  userId          String     @unique
  nombre          String
  apellido        String
  email           String     @unique
  telefono        String?
  direccion       String?
  especialidad    String?
  disponibilidad  String?    @default("DISPONIBLE")
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  certificaciones String?
  distrito        String?
  dni             String?    @unique
  experiencia     Int?       @default(0)
  profileImage    String?
  servicios       Servicio[]
  usuario         Usuario    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tecnicos")
}

model Cliente {
  id           Int        @id @default(autoincrement())
  userId       String     @unique
  nombre       String
  apellido     String
  email        String     @unique
  telefono     String?
  direccion    String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  dni          String?
  razonSocial  String?
  ruc          String?    @unique
  sector       String?
  tipo         String?    @default("persona")
  profileImage String?
  usuario      Usuario    @relation(fields: [userId], references: [id], onDelete: Cascade)
  equipos      Equipo[]
  servicios    Servicio[]

  @@map("clientes")
}

model Equipo {
  id               Int              @id @default(autoincrement())
  clienteId        Int
  nombre           String
  tipo             String
  marca            String?
  modelo           String?
  numeroSerie      String?
  ubicacion        String?
  descripcion      String?
  fechaInstalacion DateTime?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  fechaCompra      DateTime?
  capacidad        String?
  estadoOperativo  String?          @default("operativo")
  imagenEquipo     String?
  cliente          Cliente          @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  servicios        Servicio[]
  serviciosEquipo  ServicioEquipo[]

  @@map("equipos")
}

model Servicio {
  id                String           @id
  clienteId         Int
  equipoId          Int?
  tecnicoId         Int?
  tipoServicio      String
  descripcion       String
  fechaSolicitud    DateTime         @default(now())
  fechaProgramada   DateTime?
  fechaCompletado   DateTime?
  estado            EstadoServicio   @default(PENDIENTE)
  prioridad         Prioridad        @default(MEDIA)
  observaciones     String?
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  detalles          Json?
  evaluacion        Json?
  fechaInicio       DateTime?
  motivoCancelacion String?
  numeroOrden       String?          @unique
  cliente           Cliente          @relation(fields: [clienteId], references: [id])
  equipo            Equipo?          @relation(fields: [equipoId], references: [id])
  tecnico           Tecnico?         @relation(fields: [tecnicoId], references: [id])
  equiposServicio   ServicioEquipo[]

  @@map("servicios")
}

model ServicioEquipo {
  id         Int      @id @default(autoincrement())
  servicioId String
  equipoId   Int
  createdAt  DateTime @default(now())
  equipo     Equipo   @relation(fields: [equipoId], references: [id])
  servicio   Servicio @relation(fields: [servicioId], references: [id], onDelete: Cascade)

  @@unique([servicioId, equipoId])
  @@map("servicios_equipos")
}

model Repuesto {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  marca       String?
  modelo      String?
  categoria   String?
  precio      Decimal? @db.Decimal(10, 2)
  stock       Int      @default(0)
  stockMinimo Int      @default(5)
  ubicacion   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("repuestos")
}

model Herramienta {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  marca       String?
  modelo      String?
  categoria   String?
  estado      String?
  ubicacion   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("herramientas")
}

model RepuestoFormulario {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  disponible  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("repuestos_formulario")
}

enum Role {
  ADMIN
  TECNICO
  CLIENTE
}

enum EstadoServicio {
  PENDIENTE
  PROCESO
  COMPLETADO
  CANCELADO
}

enum Prioridad {
  BAJA
  MEDIA
  ALTA
  URGENTE
}
